services:
  redis:
    image: redis:8.2-alpine
    command: redis-server --requirepass redis
    env_file:
      - ./.env
    networks:
      - app-network
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s

  postgres:
    image: postgres:17.6-alpine
    env_file:
      - ./example.env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  postgres_test:
    image: postgres:17.6-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - test-postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: on-failure
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    command: celery -A app.api.celery_worker.app worker --loglevel=info
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - ./.env
    volumes:
      - .:/app
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "celery -A app.api.celery_worker.app inspect ping || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - celery
    volumes:
      - .:/app
      - ./media:/app/media
      - ./static:/app/static
    networks:
      - app-network
volumes:
  postgres-data:
  test-postgres-data:
  redis-data:

networks:
  app-network:
    driver: bridge